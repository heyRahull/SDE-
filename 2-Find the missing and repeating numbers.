Method 1 (Use Sorting) - T.C = O(nlogn)
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
   int arr[] = {4,3,6,2,1,1};
   int n = sizeof(arr)/sizeof(arr[0]);
   int rep;

   sort(arr,arr+n);
   // 1,1,2,3,4,6
   for(int i=1;i<n;i++)
   {
       if(arr[i]==arr[i-1])
       rep = arr[i];
   }

int sumN = (n*(n+1))/2;
int sum = 0; 
   for(int j=0;j<n;j++)
   {
       sum = sum + arr[j];
   }

   cout<<"repeating number "<<rep<<"\n";
   cout<<"missing number "<<sumN - sum + rep; 

}
------------------------------------------------------------------------------------------------

Method 2 (Usig count array) -T.C = O(N), S.C = O(N)
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
   int arr[] = {4,3,6,2,1,1};
   int n = sizeof(arr)/sizeof(arr[0]);
   int temp[n];  

    for(int i=0;i<n;i++)
    {
        temp[i]=0;
    }

    for(int i=0;i<n;i++)
    {
        if(temp[arr[i]-1]==0)
        temp[arr[i]-1]=1;
        else
        cout<<"repeating elem : "<<arr[i]<<"\n"; 
    }

    for(int i=0;i<n;i++)
    {
        if(temp[i]==0)
        cout<<"missing elem : "<<i+1;
    }
}
-------------------------------------------------------------------------------------------

Method 3 (Negation of Index) - T.C = O(N), S.C = O(1)
#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
   int arr[] = {4,3,6,2,1,1};
   int n = sizeof(arr)/sizeof(arr[0]);

    for(int i=0;i<n;i++)
    {
        if(arr[abs(arr[i])-1]>0)
        arr[abs(arr[i])-1] = - arr[abs(arr[i])-1];
        else
        cout<<"Repeating elem : "<<abs(arr[i]);

    }

    for(int i=0;i<n;i++)
    {
        if(arr[i]>0)
        cout<<"missing elem : "<<i+1;
    }
}

-----------------------------------------------------------------------------------------------

Method 4 (make two equations using sum and sum of square) T.C = O(N),S.C =O(1)
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

vector<int>repeatedNumber(const vector<int>&A)
{
    long long int n = A.size();
    long long int sum_N = (n*(n+1))/2; 
    long long int sum_Nsq = (n*(n+1)*(2*n+1))/6;
    long long int missingNumber = 0;
    long long int repeating = 0;

    for(int i=0;i<n;i++)
    {
        sum_N -= (long long int)A[i];
        sum_Nsq -= (long long int)A[i] * (long long int)A[i];
    }

    missingNumber = ((sum_Nsq/sum_N) + sum_N)/2;
    repeating = missingNumber - sum_N;

    vector<int>ans;
    ans.push_back(repeating);
    ans.push_back(missingNumber);
    return ans;
}

int main()
{
  vector<int>v = {4,3,6,2,1,6,7};
  vector<int>res=repeatedNumber(v);
  for(int x:res)
  {
      cout<<x<<" ";
  }
}
NOTE : In this approach the summations might increase and that is why we have used long long int. There is one more optimal solution using xor, lets see that.
------------------------------------------------------------------------------------------------------------
Method 5 (Use XOR) T.C = O(N),S.C = O(1)

#include<iostream>
#include<bits/stdc++.h>
using namespace std;

void getTwoElements(int arr[],int n,int *x,int *y)
{
    int xor1 = arr[0];
    for(int i=1;i<n;i++)
    xor1 ^= arr[i];
    for(int i=1;i<=n;i++)
    xor1 ^=i;

    int set_bit_no = xor1 &~(xor1 -1);
    *x=0,*y=0;
    for(int i=0;i<n;i++)
    {
        if(arr[i] & set_bit_no)
        *x = *x ^ arr[i];
        else
        *y = *y ^ arr[i];
    }
    for(int i=1;i<=n;i++)
    {
        if(i & set_bit_no)
        *x = *x ^ i;
        else
        *y = *y ^ i;
    }
}

int main()
{
int arr[] = {1,3,4,5,5,6,2};
int *x =(int *)malloc(sizeof(int));
int *y =(int*)malloc(sizeof(int));
int n = sizeof(arr)/sizeof(arr[0]);

getTwoElements(arr,n,x,y);
cout<<"The missing element is "<<*x<<" and the repeating element is "<<*y;
}

------------------------------------------------------------------------------------------------------------------------
Method 6 (Use a Map) T.C = O(N),S.C= O(1)

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int arr[] = {4,3,6,2,1,1,1};
    int n = 6;
    unordered_map<int,bool>numberMap;
    for(int i=0;i<n;i++)
    {
        if(numberMap.find(arr[i])==numberMap.end())
        numberMap[arr[i]]=true;
        else
        cout<<"Repeating elem = "<<arr[i]<<"\n";
    }
    for(int i=1;i<=n;i++)
    {
        if(numberMap.find(i)==numberMap.end())
        cout<<"Missing elem = "<<i;
    }
}
-----------------------------------------------------------------------------------------------------------------

Method 7 (Swap Sort) T.C =O(N),S.C = O(1)

NOTE :- This algo can be used if there are multiple missing and multiple repeating elements in an array.
Disclaimer :- This algo can't be used if it given that you cannot perform any changes int the array or the array is immutable.

#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int arr[] = {4,3,6,2,1,1,1};
    int n = 6;
    
    int i=0;
    while(i<n)
    {
        if(arr[i]!=arr[arr[i]-1])
        swap(arr[i],arr[arr[i]-1]);
        else 
        i++;
    }
    for(int i=0;i<n;i++)
    {
        if(arr[i]!=i+1)
        {
            cout<<"missing elem : "<<i+1<<"\n";
            cout<<"repeating elem : "<<arr[i];
        }
    }
}
----------------------------------------------------------------------------------------------------------------
